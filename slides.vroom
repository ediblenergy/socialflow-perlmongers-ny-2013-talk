# This is a sample Vroom input file. It should help you get started.
#
# Edit this file with your content. Then run `vroom vroom` to start
# the show!
#
# See `perldoc Vroom` for complete details.
#
---- config
# Basic config options.
title: SocialFlow, from 20_000 feet!
indent: 5
auto_size: 1
# height: 18
# width: 69
vim_opts: '-u NONE'
colorscheme: jellybeans

# The following options are for Gvim usage.
# vim: gvim
# gvimrc: |
#   set fuopt=maxhorz,maxvert
#   set guioptions=egmLtT
#   set guifont=Bitstream_Vera_Sans_Mono:h18
#   set guicursor=a:blinkon0-ver25-Cursor
#   colorscheme default

---- 

SocialFlow - A brief rundown of our most interesting ( to me ) perl projects

* NY Perl Mongers ( http://www.meetup.com/The-New-York-Perl-Meetup-Group/ )

* July 18, 2013

----

Social Media optimization for media companies ( newspapers, magazines, etc ) and brands

Cadence - for earned media

Forte - for boosting earned media with paid

Crescendo - for paid media

Currently we support Facebook & Twitter


----

SocialFlow's CPAN stack:

Database

* DBIx::Class
* Redis
* ZMQ

Web Development

* Catalyst
* Plack
* Starman

3rd party 

* Net::Twitter
* Facebook::Graph
* Web::Scraper

Toolchain

* Dist::Zilla
* Devel::Local
* Object::Remote
* System::Introspector
* App::Nopaste
* App::GitGot
* App::Ack
* Reply
* App::cpanminus

----

== Some stuff SocialFlow (and SocialFlow sponsored ) projects

* Object::Remote
* System::Introspector
* Alorithm::Dablooms
* sfs3

----


Object::Remote - https://metacpan.org/module/Object::Remote

http://www.youtube.com/watch?v=eoNw5jmKvB8 #mst the __END__ of everything

cat fatpacked_script.pl | ssh $host perl -

+System::Introspector

https://github.com/SocialFlowDev/System-Introspector/tree/checkpoint_sf/lib/System/Introspector/Probe

http://wiki.socialflow.com:8080/wiki/System:log2.priv.sf#Listening_sockets_for_log2.priv.sf

----center

Algorithm::Dablooms

"A Bloom filter, conceived by Burton Howard Bloom in 1970 is a space-efficient probabilistic data structure that is used to test whether an element is a member of a set. False positive matches are possible, but false negatives are not." -  http://en.wikipedia.org/wiki/Bloom_filter

Bitly Dablooms: "This project aims to demonstrate a novel bloom filter implementation that can scale, and provide not only the addition of new members, but reliable removal of existing members." - https://github.com/bitly/dablooms

----perl

my $id = 0;
my $bloom = Algorithm::Dablooms->new({
    capacity => 20_000,
    error_rate => 0.05,
    filename => $bloom_file,
});

#...

$bloom->add("Grand Duchess Anastasia Nikolaevna of Russia", ++$id);

#later

$bloom->contains( "Grand Duchess Anastasia Nikolaevna of Russia" ); #its true!

----

== sfs3

[10:26] <edibsk> hey paul, I'm doing a perlmongers ny.pm talk tonight about interesting perl projects at SocialFlow, I was thinking of briefly covering sfs3
[10:27] <edibsk> so from a high level, is it a tool to parallelize uploads to s3, and can do multipart uploads concurrently on the same file?
[10:29] <LeoNerd> Yes and no...
[10:29] <LeoNerd> It's a tool to do parallel uploads, but it can't do concurrent uploads of multiple parts -within- one file
[10:29] <LeoNerd> It's a massive pain to deal with S3, so there's lots of limitations
[10:30] <LeoNerd> The primary thing that sfs3 does is allows storing of per-file metadata, so we can store the whole-file md5sum on S3 itself; something that has been hitherto literally impossible
#....
10:35] <LeoNerd> S3 _does not_ give you a whole-file md5sum for multipart files. Not at all
[10:35] <LeoNerd> Nor, once it is uploaded, does S3 give you any way to get the etags of the pieces.
[10:35] <LeoNerd> So what sfs3 does is stores data in a subspace called data/ and extra metadata in a space called meta/. One item of metadata is a tiny text file just containing the md5sum in nice easy ASCII
[10:36] <LeoNerd> The reason it does that, rather than storing x-aws-meta-md5sum is that S3 does not give you _any_ way to set the metadata at the end.. only before you start
[10:36] <LeoNerd> But if you're uploading a 20GB file you don't want to read it once off disk just to calculate the md5sum, before you read it a second time to upload it.

----

== Some useful stuff SocialFlow uses 

* Thrift
* DBIx::Class::Candy
* Import::Into
* Company CPAN
* ZMQ

----

Thrift

"The Apache Thrift software framework, for scalable cross-language services development, combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages."

--http://thrift.apache.org/

Things that use Thrift:
* Cassandra
* Hypertable
* HBase
* ElasticSearch
* ?

---- perl

use Hypertable::ThriftClient;
my $ht = Hypertable::ThriftClient->new($master, $port);
my $ns = $ht->namespace_open($namespace);
#...
my $users_mutator = $ht->mutator_open($ns, 'users', $ignore_unknown_cfs, 10);
#...

my $keys = Hypertable::ThriftGen::Key->new({ row => $row, column_family => $cf, column_qualifier => $cq });
my $cell = Hypertable::ThriftGen::Cell->new({key => $keys, value => $val});
$ht->mutator_set_cell($mutator, $cell);
$ht->mutator_flush($mutator);
$ht->mutator_close($users_mutator);

----
Operation DBIx::Class cleanup

leveraging

DBIx::Class::Candy & Import::Into

warning: controversial

---- perl

use strict;
use warnings;

package SocialFlow::Web::Schema::Result::Client;
use SocialFlow::Billing::ProductType qw[ :all ];
use parent 'SocialFlow::Web::Schema::Result';
__PACKAGE__->load_components(qw/TimeStamp +SocialFlow::Web::Schema::Component::Roles/);
__PACKAGE__->table('client');
__PACKAGE__->add_columns(
    client_id        => { data_type => 'serial', },
    client_source_id => { data_type => 'integer'  },
    company          => { data_type => 'citext', accessor => '_company' },    # case insensitive
    website_url      => { data_type => 'text', },
    access_tier      => { data_type => 'smallint', default_value => 0 },    # standard / business / enterprise (use sub tier - below)
    active           => { data_type => 'smallint' },    # active, deleted, ?
    opted_in         => { data_type => 'boolean', default_value => 'false' },
    create_date      => { data_type => 'timestamp', set_on_create => 1 },
    max_social_accts => { data_type => 'integer',  default_value => 0 },
    default_time_zone => { data_type => 'text', default_value => 'UTC' },
);

# recurrence
# 0 - Monthly
# 1 = Yearly

__PACKAGE__->set_primary_key("client_id");
__PACKAGE__->belongs_to(
    client_source => 'SocialFlow::Web::Schema::Result::ClientSource',
    'client_source_id'
);
__PACKAGE__->has_many(
    client_appusers => 'SocialFlow::Web::Schema::Result::ClientAppuser',
    'client_id'
);
__PACKAGE__->many_to_many(
    appusers => 'client_appusers',
    'appuser'
);
__PACKAGE__->has_many(
    client_appuser_roles =>
        'SocialFlow::Web::Schema::Result::ClientAppuserRole',
    'client_id'
);

#......
1;

----perl

package SocialFlow::Web::Schema::Result::Client;
use SocialFlow::Web::Schema::ResultBase {
    extra_components => [
        qw[
          +SocialFlow::Web::Schema::Component::Roles
          ] ] };

table('client');

primary_column client_id => { data_type => serial };

integer_column 'client_source_id';

column company => { data_type => citext, accessor => '_company' };

text_column 'website_url';

column access_tier => { data_type => smallint, default_value => 0 };

# Rename the accessor since this is not a boolean as the column name would suggest.
column active => { data_type => smallint, accessor => '_active' };

boolean_column opted_in => { default_value => 0 };

timestamp_column create_date => { set_on_create => true };

integer_column max_social_accts => { default_value => 0 };

text_column default_time_zone => { default_value => 'UTC' };

# recurrence
# 0 - Monthly
# 1 = Yearly

belongs_to(
    client_source => '::ClientSource',
    'client_source_id'
);
has_many(
    client_appusers => '::ClientAppuser',
    'client_id'
);
many_to_many(
    appusers => 'client_appusers',
    'appuser'
);
has_many(
    client_appuser_roles =>
        '::ClientAppuserRole',
    'client_id'
);

#......

1;

---- perl

package SocialFlow::Schema::ResultBase;
use strictures 1;
#use Devel::SimpleTrace;
use DBIx::Class::Candy ();
use Import::Into;
use SocialFlow::Schema::Util ();
#use boolean ();
use Carp ();
use Safe::Isa;
use Data::Dumper::Concise;
use List::Util qw(first);


sub _schema_specific_components {
    my $class = shift;
    ## This should be implemented by the child if any additional
    # components must be loaded by all result classes
    return ();
} 

sub _default_result_namespace {
    my $class = shift;
    ## Override if you want, reasonable default
    return sub () { $class->_schema_class . '::Result' };
}

sub _schema_class {
    die "_schema_class must be implemented by child class";
}

sub _candy_components {
    my($class,$params) = @_;
    my @imports = qw[
      TimeStamp
      +SocialFlow::Schema::Util
      Helper::Row::RelationshipDWIM
      Helper::Row::ProxyResultSetMethod
      ];
    push (@imports, $class->_schema_specific_components);
    if( $params->{extra_components} ) {
        push( @imports, @{ delete $params->{extra_components} } );
    }
    return \@imports;
}

sub import {
    my ( $class, $params ) = @_;
    my $target = caller;
    strictures->import::into($target,1);
    indirect->import::into($target);
    DBIx::Class::Candy->import::into( $target,
        -components => $class->_candy_components($params), );
    #boolean->import::into($target);
    Carp->import::into($target);
    Data::Dumper::Concise->import::into($target);
    Safe::Isa->import::into($target);
    {
        #For https://metacpan.org/module/DBIx::Class::Helper::Row::RelationshipDWIM
        no strict 'refs';
        no warnings 'once';
        *{"$target\::default_result_namespace"} = $class->_default_result_namespace;
    }
}

----perl
package SocialFlow::Schema::Util;
use strictures 1;
# ABSTRACT: Shared Schema column constants and utils

use DBIx::Class::Candy::Exports;
use JSON::XS;

my $json = JSON::XS->new;
sub json { $json }

use constant {
    text      => 'text',
    citext    => $ENV{CITEXT} || 'citext',
    serial    => ( $ENV{SERIAL} ) || 'serial',
    integer   => 'integer',
    bigint    => 'bigint',
    smallint  => 'smallint',
    inet      => 'inet',
    float     => 'float',
    timestamp => 'timestamp',
    date      => 'date',
    enum      => 'enum',
    bool  => 'boolean',    #namespace collision with boolean.pm
    true  => 1,
    false => 0,
};

sub _type_column {
    my($class,$type,$col,$params) = @_;
    $params ||= {};
    $class->add_column( $col => { data_type => $type, %$params } )
}

sub integer_column {
    shift->_type_column(integer,@_);
}

sub bigint_column {
    shift->_type_column(bigint,@_);
}

sub text_column {
    shift->_type_column(text,@_);
}

sub citext_column {
    shift->_type_column(citext,@_);
}

sub date_column {
    shift->_type_column(date,@_);
}

sub timestamp_column {
    shift->_type_column(timestamp,@_);
}

sub boolean_column {
    shift->_type_column(bool,@_);
}

sub bool_column {
    shift->boolean_column(@_);
}

sub float_column {
    shift->_type_column(float,@_);
}

sub create_date_column {
    shift->add_columns(
        create_date => { data_type => timestamp, set_on_create => 1, @_ } );
}

sub is_active_column {
    my($class,$default) = @_;
    $default //= 1;
    shift->add_columns(
        is_active => { data_type => bool, default_value => $default }
    );
}

sub update_date_column {
    shift->add_columns(
        update_date => {
            data_type     => timestamp,
            set_on_create => 1,
            set_on_update => 1,
            @_
        } );
}


export_methods(
    [
        qw(
          integer_column
          bigint_column
          text_column
          citext_column
          date_column
          timestamp_column
          float_column
          boolean_column
          create_date_column
          update_date_column
          is_active_column

          text
          citext
          timestamp
          date
          bool
          serial
          integer
          bigint
          smallint
          inet
          float
          enum


          true
          false
          )
    ]
);
1;

=head1 NAME

SocialFlow::Schema::Util - Shared functionality across all sf schemata

=head1 SYNOPSIS

    use DBIx::Class::Candy
        -components => [qw(
            +SocialFlow::Schema::Util
        )];

=head1 DESCRIPTION

=head1 AUTHOR

skaufman@socialflow.com

=head1 COPYRIGHT

Copyright (c) %s the %s L</AUTHOR> and L</CONTRIBUTORS>
as listed above.

=cut

----

== Company CPAN

* Dependencies are mixed with regular cpan deps:
    ex: SocialFlow::Performance = 1.2

CPAN::Mini + CPAN::Mini::Inject

+* had problems with CPAN::Mini not mirroring stuff properly

* Pinto didn't exist yet

+* an mst bash script:

---- sh
#!/bin/sh

set -e

# Dumbass minicpan replacement - Matt S Trout 2005/6. Perl license.

# Pick one from http://cpan.org/SITES.html#RSYNC
#rsync://mirrors.ibiblio.org/CPAN/
REMOTEHOST=${REMOTEHOST-'mirror.cogentco.com'}
REMOTEPREFIX=${REMOTEPREFIX-'CPAN'}

# Can override mirror dir by putting it as first argument on command line
LOCAL=${1-/home/mcpani/mirror}

cd $LOCAL

mkdir -p work authors/id modules

rsync $REMOTEHOST::"$REMOTEPREFIX/modules/03modlist.data.gz $REMOTEPREFIX/modules/02packages.details.txt.gz" modules/
rsync $REMOTEHOST::"$REMOTEPREFIX/authors/01mailrc.txt.gz" authors/

zcat modules/02packages.details.txt.gz \
    | egrep '\.(tar\.gz|tgz|zip)$' \
    | egrep -v '/((perl-|parrot-|ponie-)[0-9]|perl5\.004)' \
    | awk '{print $3}' \
    | sort -u >work/targets.dists

cat work/targets.dists \
    | cut -d'/' -f1-3 \
    | sort -u \
    | perl -pe 's!$!/CHECKSUMS!;' >work/targets.checksums

cat work/targets.dists \
    | perl -pe 's!/[^/]+$!\n!;' >work/targets.dirs

cd $LOCAL/authors/id

cat $LOCAL/work/targets.dirs | xargs -n100 mkdir -p

cat $LOCAL/work/targets.checksums | xargs -n100 touch

cat $LOCAL/work/targets.dists | xargs -n100 touch

cd $LOCAL

rsync -vr --size-only --existing $REMOTEHOST::"$REMOTEPREFIX/authors/" authors/

find authors/id -name '*.*' | perl -pe 's!^authors/id/!!;' | sort -u >work/tree.all

sort -u work/targets.* | comm -13 - work/tree.all | perl -pe 's!^!authors/id/!;' | xargs --no-run-if-empty rm -v

---- perl

#!/usr/bin/env perl
use strictures 1;
use CPAN::Mini::Inject;
use 5.10.0;
my $mcpani = CPAN::Mini::Inject->new;
my $file = $ARGV[0] or die "$@ $!";
my $cfg = $mcpani->config_class->new;
for (
    [ 'local',      '/home/mcpani/mirror' ],
    [ 'repository', '/home/mcpani/SocialFlowCPAN/dists' ],
    [ 'dirmode',    '0755' ]
  )
{
    $cfg->set( $_->[0], $_->[1] );
}
$mcpani->config($cfg);
$mcpani->readlist;

$mcpani->add(
    authorid => "SOCIALFLOW",
    file     => $file
);

my @added = $mcpani->added_modules;
foreach my $added (@added) {
    print "\nAdding File: $added->{file}\n";
    print "Author ID: $added->{authorid}\n";
    my $modules = $added->{modules};
    foreach my $mod ( sort keys %$modules ) {
        print "Module: $mod\n";
        print "Version: $modules->{$mod}\n";
    }
    print "To repository: $mcpani->{config}{repository}\n\n";
}
$mcpani->writelist;

---- perl
use strictures 1;

package Dist::Zilla::Plugin::SocialFlow::Release;
use Moose;
use Path::Class ();
use File::Copy  ();
use Git::Wrapper;
use Net::OpenSSH;
use File::HomeDir::PathClass;

with 'Dist::Zilla::Role::Releaser';

# ABSTRACT: Releases modules into the SocialFlow minicpan mirror

has ssh => (
  is      => "ro",
  isa     => "Net::OpenSSH",
  lazy    => 1,
  default => sub { Net::OpenSSH->new('mcpani@devdb') }
);

has config => (
  is      => "ro",
  isa     => "Path::Class::File",
  lazy    => 1,
  default => sub {
    File::HomeDir::PathClass->home->file('.sfcpanrc');
  }
);

has mcpan_repo => (
  is => 'ro',
  isa => 'Path::Class::Dir',
  lazy_build => 1
);

has git => (
  is      => "ro",
  isa     => "Git::Wrapper",
  lazy    => 1,
  default => sub { Git::Wrapper->new( shift->mcpan_repo ) }
);

sub _build_mcpan_repo {
  my ($self) = @_;
my $s = $self->config->stat  ? $self->config->slurp : undef;
  return defined($s)
    && length($s)
    ? Path::Class::dir($s)
    : File::HomeDir::PathClass->home->subdir('SocialFlowCPAN');
}

sub release {
  my ( $self, $tarball ) = @_;
  $self->git->pull({rebase => 1});
  $self->copy_to_mcpan_repo($_), $self->git->add("dists/$_") for $tarball;
  $self->git->fetch;
  $self->git->commit( { message => "[RELEASE] $tarball" } );
  $self->git->push(qw[origin HEAD]);
#  $self->git->push('--tags');
#  $self->ssh_add_dist($tarball);
}

sub copy_to_mcpan_repo {
  my ( $self, $tarball ) = @_;
  my $target = $self->mcpan_repo->subdir('dists');
  File::Copy::copy( $tarball, $target->stringify )
    or die "Couldn't release $tarball: $!";
}

sub ssh_add_dist {
  my ( $self, $tarball ) = @_;
  $self->ssh->system("add_dist $tarball");
}

1;

----

ØMQ ( zeromq )

Read more at http://www.zeromq.org/ but careful of the koolaid

---- perl

use strictures 1;
use JSON::XS;
use SocialFlow::Reporting::Schema;
use aliased 'SocialFlow::Web::Config::Cached' => 'SFConfig';
use aliased 'SocialFlow::Reporting::Daemon::Timeline::Item::Facebook' =>
  'TimelineItem';
use ZMQ;
use ZMQ::Constants qw[ZMQ_PUB ZMQ_SUB ZMQ_SUBSCRIBE];
use Data::Dumper::Concise;
my $cfg = SFConfig->config;
my $schema = SocialFlow::Reporting::Schema->connect($cfg->{reporting}{db});

my $ctx = ZMQ::Context->new(5);
my $subscriber = $ctx->socket( ZMQ_SUB );
$subscriber->connect("tcp://facebook-1:5500");
$subscriber->setsockopt(ZMQ_SUBSCRIBE, "");
while ( my $msg = $subscriber->recv ) {
    my $obj = decode_json( $msg->data );
    unless( $obj->{created_time} && ( $obj->{message} || $obj->{description} ) ) {
        next;
    }
    my $ti = TimelineItem->new( %$obj, sf_reporting => $schema );
    $ti->run;
}
